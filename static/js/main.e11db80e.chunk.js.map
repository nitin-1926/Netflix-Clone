{"version":3,"sources":["common/axios.js","components/Row/Row.js","common/requests.js","components/Body/Body.js","components/Banner/Banner.js","components/Nav/Nav.js","App.js","serviceWorker.js","index.js"],"names":["instance","axios","create","baseURL","get","Row","title","fetchUrl","isLargeRow","useState","movies","setMovies","trailerUrl","setTrailerUrl","useEffect","a","request","data","results","fetchData","className","map","movie","key","id","src","poster_path","backdrop_path","alt","name","original_title","onClick","movieTrailer","then","url","urlParams","URLSearchParams","URL","search","catch","err","console","log","handleClick","videoId","opts","height","width","playerVars","autoplay","API_KEY","requests","fetchTrending","fetchNetflixOriginals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanticMovies","fetchDocumentaries","Body","Banner","setMovie","randomNumber","Math","floor","random","length","str","n","style","backgroundSize","backgroundImage","backgroundPosition","original_name","overview","substr","Nav","show","setShow","window","addEventListener","scrollY","removeEventListener","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.e11db80e.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://api.themoviedb.org/3',\r\n});\r\n\r\ninstance.get('');\r\n\r\nexport default instance;","import React, { useState, useEffect } from 'react';\r\nimport axios from '../../common/axios';\r\nimport './Row.css';\r\nimport YouTube from 'react-youtube';\r\nimport movieTrailer from 'movie-trailer';\r\n\r\nconst baseUrl = 'https://image.tmdb.org/t/p/original';\r\n\r\nconst Row = ({title, fetchUrl, isLargeRow}) => {\r\n    const [movies, setMovies] = useState([]);\r\n    const [trailerUrl, setTrailerUrl] = useState('');\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            const request = await axios.get(fetchUrl);\r\n            setMovies(request.data.results);\r\n            return request;\r\n        }\r\n        fetchData();\r\n    }, [fetchUrl]);\r\n\r\n    const options = {\r\n        height: '390',\r\n        width: '100%',\r\n        playerVars: {\r\n            autoplay: 1,\r\n        }\r\n    };\r\n\r\n    const handleClick = movie => {\r\n        if (trailerUrl) {\r\n            setTrailerUrl('');\r\n        }\r\n        movieTrailer(movie.name || movie.original_title || '')\r\n            .then(url => {\r\n                const urlParams = new URLSearchParams(new URL(url).search);\r\n                setTrailerUrl(urlParams.get('v'));\r\n            }).catch(err => {\r\n                console.log(err);\r\n            })\r\n    };\r\n\r\n    return (\r\n        <div className='row'>\r\n            <h2>{title}</h2>\r\n\r\n            <div className='row_posters'>\r\n                {movies.map(movie => (\r\n                    <img\r\n                        key={movie.id}\r\n                        className={`row_poster ${isLargeRow && 'largeRow'}`}\r\n                        src={`${baseUrl}${isLargeRow ? movie.poster_path : movie.backdrop_path}`}\r\n                        alt={movie.name || movie.original_title}\r\n                        onClick={() => {\r\n                            handleClick(movie);\r\n                        }}\r\n                        title={!isLargeRow ? (movie.name || movie.original_title) : ''}\r\n                    />\r\n                ))}\r\n            </div>\r\n\r\n            {trailerUrl && <YouTube videoId={trailerUrl} opts={options} />}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Row\r\n","const API_KEY = '3fc5dafd0026546ea8b748c8a9868c45';\r\n\r\nconst requests = {\r\n    fetchTrending: `/trending/all/week?api_key=${API_KEY}&language=en-US`,\r\n    fetchNetflixOriginals: `/discover/tv?api_key=${API_KEY}&with_networks=213`,\r\n    fetchTopRated: `/movie/top_rated?api_key=${API_KEY}&language=en-US`,\r\n    fetchActionMovies: `/discover/movie?api_key=${API_KEY}&with_genres=28`,\r\n    fetchComedyMovies: `/discover/movie?api_key=${API_KEY}&with_genres=35`,\r\n    fetchHorrorMovies: `/discover/movie?api_key=${API_KEY}&with_genres=27`,\r\n    fetchRomanticMovies: `/discover/movie?api_key=${API_KEY}&with_genres=10749`,\r\n    fetchDocumentaries: `/discover/movie?api_key=${API_KEY}&with_genres=99`,\r\n}\r\n\r\nexport default requests;","import React from 'react';\r\nimport Row from '../Row/Row';\r\nimport requests from '../../common/requests';\r\n\r\nconst Body = () => {\r\n    return (\r\n        <div>\r\n            <Row\r\n                title='NETFLIX ORIGINALS'\r\n                fetchUrl={requests.fetchNetflixOriginals}\r\n                isLargeRow\r\n            />\r\n            <Row title='Trending Now' fetchUrl={requests.fetchTrending} />\r\n            <Row title='Top rated' fetchUrl={requests.fetchTopRated} />\r\n            <Row title='Action Movies' fetchUrl={requests.fetchActionMovies} />\r\n            <Row title='Comedy Movies' fetchUrl={requests.fetchComedyMovies}/>\r\n            <Row title='Horror Movies' fetchUrl={requests.fetchHorrorMovies} />\r\n            <Row title='Romantic Movies' fetchUrl={requests.fetchRomanticMovies}/>\r\n            <Row title='Documentaries' fetchUrl={requests.fetchDocumentaries}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Body;\r\n","import React, { useState, useEffect } from 'react';\r\nimport axios from '../../common/axios';\r\nimport requests from '../../common/requests';\r\nimport './Banner.css';\r\n\r\nconst baseUrl = 'https://image.tmdb.org/t/p/original';\r\n\r\nconst Banner = () => {\r\n    const [movie, setMovie] = useState(null);\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            const request = await axios.get(requests.fetchNetflixOriginals);\r\n            const randomNumber = Math.floor(Math.random() * request.data.results.length - 1);\r\n            setMovie(request.data.results[randomNumber]);\r\n            return request;\r\n        }\r\n        fetchData();\r\n    }, []);\r\n\r\n    const truncate = (str, n) => {\r\n        return str?.length > n ? str.substr(0, n - 1) + '...' : str;\r\n    }\r\n\r\n    return (\r\n        <header className='banner'\r\n            style={{\r\n                backgroundSize: 'cover',\r\n                backgroundImage: `url(\r\n                    ${baseUrl}${movie?.backdrop_path}\r\n                )`,\r\n                backgroundPosition: 'center center'\r\n            }}\r\n        >\r\n            <div className='bannerContents'>\r\n                <h1 className='bannerTitle'> {movie?.title || movie?.name || movie?.original_name} </h1>\r\n\r\n                <div className='bannerButtons'>\r\n                    <button className='bannerButton'>Play</button>\r\n                    <button className='bannerButton'>My List</button>\r\n                </div>\r\n\r\n                <h1 className='bannerDescription'>{truncate(movie?.overview, 150)}</h1>\r\n            </div>\r\n\r\n            <div className=\"bannerFadeBottom\"></div>\r\n            \r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Banner\r\n","import React, { useState, useEffect } from 'react';\r\nimport './Nav.css';\r\n\r\nconst Nav = () => {\r\n    const [show, setShow] = useState(false);\r\n    useEffect(() => {\r\n        window.addEventListener('scroll', () => {\r\n            if (window.scrollY > 100) {\r\n                setShow(true);\r\n            } else {\r\n                setShow(false);\r\n            }\r\n        });\r\n        return () => {\r\n            window.removeEventListener('scroll');\r\n        };\r\n    }, []);\r\n\r\n    return (\r\n        <div className={`nav ${show && 'navBlock'}`}>\r\n            <img\r\n                className='navLogo'\r\n                src='https://upload.wikimedia.org/wikipedia/commons/0/0f/Logo_Netflix.png'\r\n                alt='Netflix' \r\n            />\r\n            <img\r\n                className='navAvatar'\r\n                src=\"https://pbs.twimg.com/profile_images/1240119990411550720/hBEe3tdn_400x400.png\"\r\n                alt=\"Netflix\" \r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Nav;\r\n\r\n","import React from 'react';\nimport './App.css';\nimport Body from './components/Body/Body';\nimport Banner from './components/Banner/Banner';\nimport Nav from './components/Nav/Nav';\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <Nav />\n      <Banner />\n      <Body />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}